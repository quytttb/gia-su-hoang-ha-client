import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, doc, writeBatch, Timestamp } from 'firebase/firestore';
import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';

// Firebase configuration
const firebaseConfig = {
     apiKey: "AIzaSyC0ZGhS9oJTZp2jl9fVnQlYq8FQXZvZMJU",
     authDomain: "gia-su-hoang-ha.firebaseapp.com",
     projectId: "gia-su-hoang-ha",
     storageBucket: "gia-su-hoang-ha.appspot.com",
     messagingSenderId: "821551022903",
     appId: "1:821551022903:web:00a86f5c5a35e0c1e3e9f8",
     measurementId: "G-0C25SX7IGJ"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

async function migrateTutorFields() {
     console.log('üîÑ SCRIPT MIGRATION: tutor ‚Üí tutorId + tutorName');
     console.log('='.repeat(60));

     try {
          // Sign in as admin
          console.log('üîê ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n admin...');
          await signInWithEmailAndPassword(auth, 'admin@giasuhoangha.com', 'admin123');
          console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
          console.log('');

          // Step 1: Load tutors data
          console.log('üë®‚Äçüè´ B∆Ø·ªöC 1: T·∫¢I D·ªÆ LI·ªÜU TUTORS');
          console.log('-'.repeat(40));

          const tutorsRef = collection(db, 'tutors');
          const tutorsSnapshot = await getDocs(tutorsRef);

          const tutorsMap = new Map();
          tutorsSnapshot.forEach((doc) => {
               const data = doc.data();
               tutorsMap.set(doc.id, data.name || `Tutor ${doc.id}`);
          });

          console.log(`‚úÖ ƒê√£ t·∫£i ${tutorsMap.size} tutors`);
          console.log('');

          // Step 2: Load and migrate schedules
          console.log('üìÖ B∆Ø·ªöC 2: MIGRATION SCHEDULES');
          console.log('-'.repeat(40));

          const schedulesRef = collection(db, 'schedules');
          const schedulesSnapshot = await getDocs(schedulesRef);

          console.log(`üìä T√¨m th·∫•y ${schedulesSnapshot.size} schedules c·∫ßn migration`);
          console.log('');

          const batch = writeBatch(db);
          let migrationCount = 0;
          let errorCount = 0;

          schedulesSnapshot.forEach((scheduleDoc) => {
               const scheduleId = scheduleDoc.id;
               const data = scheduleDoc.data();

               console.log(`üîÑ ƒêang x·ª≠ l√Ω schedule ${scheduleId}...`);

               try {
                    let tutorId = '';
                    let tutorName = '';

                    // X·ª≠ l√Ω field tutor hi·ªán t·∫°i
                    if (data.tutor) {
                         // N·∫øu tutor l√† ID (c√≥ trong tutorsMap)
                         if (tutorsMap.has(data.tutor)) {
                              tutorId = data.tutor;
                              tutorName = tutorsMap.get(data.tutor);
                         } else {
                              // N·∫øu tutor l√† t√™n, t√¨m ID t∆∞∆°ng ·ª©ng
                              const foundTutorEntry = Array.from(tutorsMap.entries()).find(([id, name]) =>
                                   name.toLowerCase().includes(data.tutor.toLowerCase()) ||
                                   data.tutor.toLowerCase().includes(name.toLowerCase())
                              );

                              if (foundTutorEntry) {
                                   tutorId = foundTutorEntry[0];
                                   tutorName = foundTutorEntry[1];
                              } else {
                                   // N·∫øu kh√¥ng t√¨m th·∫•y, d√πng tutor ƒë·∫ßu ti√™n ho·∫∑c t·∫°o placeholder
                                   const firstTutor = Array.from(tutorsMap.entries())[0];
                                   if (firstTutor) {
                                        tutorId = firstTutor[0];
                                        tutorName = firstTutor[1];
                                        console.log(`   ‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y tutor "${data.tutor}", d√πng "${tutorName}"`);
                                   }
                              }
                         }
                    } else {
                         // N·∫øu kh√¥ng c√≥ tutor, d√πng tutor ƒë·∫ßu ti√™n
                         const firstTutor = Array.from(tutorsMap.entries())[0];
                         if (firstTutor) {
                              tutorId = firstTutor[0];
                              tutorName = firstTutor[1];
                              console.log(`   ‚ö†Ô∏è  Kh√¥ng c√≥ tutor, d√πng "${tutorName}"`);
                         }
                    }

                    if (tutorId && tutorName) {
                         // C·∫≠p nh·∫≠t document v·ªõi c·∫•u tr√∫c m·ªõi
                         const updateData = {
                              tutorId: tutorId,
                              tutorName: tutorName,
                              updatedAt: Timestamp.now()
                         };

                         // X√≥a field tutor c≈© (Firebase s·∫Ω kh√¥ng x√≥a field khi d√πng update)
                         // C·∫ßn d√πng FieldValue.delete() nh∆∞ng trong script n√†y ta s·∫Ω ghi ƒë√® to√†n b·ªô

                         batch.update(scheduleDoc.ref, updateData);

                         console.log(`   ‚úÖ Migration: tutorId="${tutorId}", tutorName="${tutorName}"`);
                         migrationCount++;
                    } else {
                         console.log(`   ‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh tutor cho schedule ${scheduleId}`);
                         errorCount++;
                    }

               } catch (error) {
                    console.log(`   ‚ùå L·ªói x·ª≠ l√Ω schedule ${scheduleId}: ${error.message}`);
                    errorCount++;
               }

               console.log('');
          });

          // Commit batch update
          if (migrationCount > 0) {
               console.log('üíæ B∆Ø·ªöC 3: L∆ØU C·∫¨P NH·∫¨T');
               console.log('-'.repeat(40));

               await batch.commit();
               console.log('‚úÖ ƒê√£ l∆∞u t·∫•t c·∫£ c·∫≠p nh·∫≠t th√†nh c√¥ng!');
               console.log('');
          }

          // Summary
          console.log('üìä K·∫æT QU·∫¢ MIGRATION:');
          console.log(`   ‚úÖ ƒê√£ migration: ${migrationCount} schedules`);
          console.log(`   ‚ùå L·ªói: ${errorCount} schedules`);
          console.log(`   üìã T·ªïng c·ªông: ${schedulesSnapshot.size} schedules`);
          console.log('');

          console.log('üéØ B∆Ø·ªöC TI·∫æP THEO:');
          console.log('   1. Ki·ªÉm tra d·ªØ li·ªáu sau migration');
          console.log('   2. X√≥a field "tutor" c≈© th·ªß c√¥ng t·ª´ Firebase Console');
          console.log('   3. Test frontend v·ªõi c·∫•u tr√∫c m·ªõi');
          console.log('   4. Ch·∫°y script validate-and-fix ƒë·ªÉ ki·ªÉm tra t√≠nh nh·∫•t qu√°n');

     } catch (error) {
          console.error('‚ùå L·ªói migration:', error.message);
     }
}

// Script ƒë·ªÉ x√≥a field tutor c≈© (c·∫ßn ch·∫°y ri√™ng)
function generateCleanupScript() {
     console.log('');
     console.log('üßπ SCRIPT X√ìA FIELD "TUTOR" C≈®:');
     console.log('='.repeat(60));
     console.log(`
// Ch·∫°y script n√†y ƒë·ªÉ x√≥a field "tutor" c≈©
import { FieldValue } from 'firebase/firestore';

const cleanupOldTutorField = async () => {
  const batch = writeBatch(db);
  const schedulesSnapshot = await getDocs(collection(db, 'schedules'));
  
  schedulesSnapshot.forEach(doc => {
    batch.update(doc.ref, {
      tutor: FieldValue.delete()
    });
  });
  
  await batch.commit();
  console.log('‚úÖ ƒê√£ x√≥a field "tutor" c≈© t·ª´ t·∫•t c·∫£ schedules');
}
  `);
}

// Run migration
migrateTutorFields().then(() => {
     generateCleanupScript();
     console.log('‚úÖ Ho√†n th√†nh migration tutor fields');
     process.exit(0);
}).catch(error => {
     console.error('‚ùå L·ªói:', error);
     process.exit(1);
});

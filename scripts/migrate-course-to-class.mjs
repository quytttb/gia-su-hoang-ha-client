import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, doc, updateDoc, getDoc } from 'firebase/firestore';
import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';

// Firebase configuration
const firebaseConfig = {
     apiKey: "AIzaSyC0ZGhS9oJTZp2jl9fVnQlYq8FQXZvZMJU",
     authDomain: "gia-su-hoang-ha.firebaseapp.com",
     projectId: "gia-su-hoang-ha",
     storageBucket: "gia-su-hoang-ha.appspot.com",
     messagingSenderId: "821551022903",
     appId: "1:821551022903:web:00a86f5c5a35e0c1e3e9f8",
     measurementId: "G-0C25SX7IGJ"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

async function migrateCourseToClass() {
     console.log('üîß MIGRATION: CHUY·ªÇN courseId ‚Üí classId TRONG SCHEDULES');
     console.log('='.repeat(70));

     try {
          // Sign in as admin
          console.log('üîê ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n admin...');
          await signInWithEmailAndPassword(auth, 'admin@giasuhoangha.com', 'admin123');
          console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
          console.log('');

          // Get all schedules
          console.log('üìÖ T·∫£i danh s√°ch schedules...');
          const schedulesRef = collection(db, 'schedules');
          const schedulesSnapshot = await getDocs(schedulesRef);

          console.log(`üìä T√¨m th·∫•y ${schedulesSnapshot.size} schedules c·∫ßn migration`);
          console.log('');

          let updated = 0;
          let skipped = 0;
          let errors = 0;

          // Process each schedule
          for (const scheduleDoc of schedulesSnapshot.docs) {
               const scheduleId = scheduleDoc.id;
               const data = scheduleDoc.data();

               console.log(`üîÑ ƒêang x·ª≠ l√Ω schedule ${scheduleId}...`);

               try {
                    const updateData = {};
                    let hasChanges = false;

                    // 1. Migrate courseId to classId
                    if (data.courseId !== undefined) {
                         console.log(`   üìù Chuy·ªÉn courseId ‚Üí classId: "${data.courseId}"`);
                         updateData.classId = data.courseId;
                         hasChanges = true;
                    } else if (!data.classId) {
                         console.log(`   ‚ö†Ô∏è  C·∫£ courseId v√† classId ƒë·ªÅu kh√¥ng t·ªìn t·∫°i`);
                    } else {
                         console.log(`   ‚è≠Ô∏è  classId ƒë√£ t·ªìn t·∫°i: "${data.classId}"`);
                         skipped++;
                         continue;
                    }

                    // 2. Add migration timestamp
                    updateData.migratedAt = new Date();
                    updateData.updatedAt = new Date();

                    if (hasChanges) {
                         // Update document
                         const scheduleRef = doc(db, 'schedules', scheduleId);
                         await updateDoc(scheduleRef, updateData);

                         console.log(`   ‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng`);
                         console.log(`      ‚Ä¢ Th√™m classId: ${updateData.classId}`);
                         console.log(`      ‚Ä¢ Th√™m migratedAt: ${updateData.migratedAt.toISOString()}`);
                         updated++;
                    }

               } catch (error) {
                    console.log(`   ‚ùå L·ªói: ${error.message}`);
                    errors++;
               }

               console.log('');
          }

          // Summary
          console.log('üìä K·∫æT QU·∫¢ MIGRATION COURSEID ‚Üí CLASSID:');
          console.log(`   ‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng: ${updated}`);
          console.log(`   ‚è≠Ô∏è  B·ªè qua (ƒë√£ c√≥ classId): ${skipped}`);
          console.log(`   ‚ùå L·ªói: ${errors}`);
          console.log(`   üìã T·ªïng c·ªông: ${schedulesSnapshot.size}`);
          console.log('');

          if (updated > 0) {
               console.log('‚ö†Ô∏è  L∆ØU √ù: Field "courseId" v·∫´n t·ªìn t·∫°i song song v·ªõi "classId"');
               console.log('   Sau khi test th√†nh c√¥ng, c·∫ßn x√≥a field "courseId" b·∫±ng script ri√™ng.');
               console.log('');
          }

          console.log('üéØ B∆Ø·ªöC TI·∫æP THEO:');
          console.log('   1. Ki·ªÉm tra l·∫°i d·ªØ li·ªáu sau migration');
          console.log('   2. Test frontend v·ªõi classId');
          console.log('   3. C·∫≠p nh·∫≠t code ƒë·ªÉ s·ª≠ d·ª•ng classId thay v√¨ courseId');
          console.log('   4. X√≥a field "courseId" khi ƒë√£ ch·∫Øc ch·∫Øn');

     } catch (error) {
          console.error('‚ùå L·ªói migration:', error.message);
     }
}

// T·∫°o script ki·ªÉm tra sau migration
async function checkMigrationResult() {
     console.log('');
     console.log('üîç KI·ªÇM TRA K·∫æT QU·∫¢ MIGRATION');
     console.log('='.repeat(50));

     try {
          const schedulesRef = collection(db, 'schedules');
          const schedulesSnapshot = await getDocs(schedulesRef);

          let hasClassId = 0;
          let hasCourseId = 0;
          let hasBoth = 0;
          let hasNeither = 0;

          schedulesSnapshot.forEach((doc, index) => {
               const data = doc.data();
               const courseExists = data.courseId !== undefined;
               const classExists = data.classId !== undefined;

               console.log(`üìÖ Schedule ${index + 1} (${doc.id}):`);
               console.log(`   courseId: ${courseExists ? data.courseId : 'N/A'}`);
               console.log(`   classId: ${classExists ? data.classId : 'N/A'}`);

               if (courseExists && classExists) {
                    hasBoth++;
                    console.log(`   Status: ‚úÖ C√≥ c·∫£ hai (migration th√†nh c√¥ng)`);
               } else if (classExists && !courseExists) {
                    hasClassId++;
                    console.log(`   Status: ‚úÖ Ch·ªâ c√≥ classId (ho√†n h·∫£o)`);
               } else if (courseExists && !classExists) {
                    hasCourseId++;
                    console.log(`   Status: ‚ö†Ô∏è Ch·ªâ c√≥ courseId (c·∫ßn migration)`);
               } else {
                    hasNeither++;
                    console.log(`   Status: ‚ùå Kh√¥ng c√≥ g√¨ (l·ªói d·ªØ li·ªáu)`);
               }
               console.log('');
          });

          console.log('üìä TH·ªêNG K√ä T·ªîNG QUAN:');
          console.log(`   ‚úÖ C√≥ c·∫£ courseId v√† classId: ${hasBoth}`);
          console.log(`   ‚úÖ Ch·ªâ c√≥ classId: ${hasClassId}`);
          console.log(`   ‚ö†Ô∏è Ch·ªâ c√≥ courseId: ${hasCourseId}`);
          console.log(`   ‚ùå Kh√¥ng c√≥ g√¨: ${hasNeither}`);
          console.log('');

          if (hasCourseId > 0) {
               console.log('üí° C·∫ßn ch·∫°y l·∫°i migration cho c√°c schedules ch·ªâ c√≥ courseId');
          } else if (hasBoth > 0) {
               console.log('üí° Migration th√†nh c√¥ng! C√≥ th·ªÉ ti·∫øn h√†nh x√≥a field courseId');
          } else if (hasClassId === schedulesSnapshot.size) {
               console.log('üéâ Ho√†n h·∫£o! T·∫•t c·∫£ schedules ƒë·ªÅu c√≥ classId');
          }

     } catch (error) {
          console.error('‚ùå L·ªói ki·ªÉm tra:', error.message);
     }
}

// Run migration
migrateCourseToClass().then(async () => {
     await checkMigrationResult();
     console.log('‚úÖ Ho√†n th√†nh migration courseId ‚Üí classId');
     process.exit(0);
}).catch(error => {
     console.error('‚ùå L·ªói:', error);
     process.exit(1);
});

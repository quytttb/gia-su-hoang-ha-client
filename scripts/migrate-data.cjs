#!/usr/bin/env node

/**
 * Script migrate data t·ª´ mock data sang Firestore
 * 
 * C√°ch s·ª≠ d·ª•ng:
 * node scripts/migrate-data.cjs
 */

const { initializeApp } = require('firebase/app');
const { getFirestore, collection, addDoc, serverTimestamp, getDocs } = require('firebase/firestore');

// Load environment variables
require('dotenv').config();

// Firebase configuration
const firebaseConfig = {
     apiKey: process.env.VITE_FIREBASE_API_KEY,
     authDomain: process.env.VITE_FIREBASE_AUTH_DOMAIN,
     projectId: process.env.VITE_FIREBASE_PROJECT_ID,
     storageBucket: process.env.VITE_FIREBASE_STORAGE_BUCKET,
     messagingSenderId: process.env.VITE_FIREBASE_MESSAGING_SENDER_ID,
     appId: process.env.VITE_FIREBASE_APP_ID,
     measurementId: process.env.VITE_FIREBASE_MEASUREMENT_ID,
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// Mock data
const mockCourses = [
     {
          title: "To√°n h·ªçc l·ªõp 10",
          description: "Kh√≥a h·ªçc to√°n h·ªçc d√†nh cho h·ªçc sinh l·ªõp 10, bao g·ªìm ƒë·∫°i s·ªë v√† h√¨nh h·ªçc c∆° b·∫£n.",
          price: 2000000,
          duration: "3 th√°ng",
          level: "C∆° b·∫£n",
          subjects: ["To√°n h·ªçc", "ƒê·∫°i s·ªë", "H√¨nh h·ªçc"],
          features: ["Gi·∫£ng vi√™n kinh nghi·ªám", "T√†i li·ªáu ƒë·∫ßy ƒë·ªß", "Luy·ªán t·∫≠p th∆∞·ªùng xuy√™n"],
          image: "https://images.unsplash.com/photo-1596495578065-6e0763fa1178?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
          isActive: true,
          instructor: "Th·∫ßy Nguy·ªÖn VƒÉn A",
          maxStudents: 20,
     },
     {
          title: "V·∫≠t l√Ω l·ªõp 11",
          description: "Kh√≥a h·ªçc v·∫≠t l√Ω n√¢ng cao cho h·ªçc sinh l·ªõp 11.",
          price: 2200000,
          duration: "4 th√°ng",
          level: "N√¢ng cao",
          subjects: ["V·∫≠t l√Ω", "C∆° h·ªçc", "Nhi·ªát h·ªçc"],
          features: ["Th√≠ nghi·ªám th·ª±c t·∫ø", "B√†i t·∫≠p phong ph√∫", "√în t·∫≠p ƒë·ªãnh k·ª≥"],
          image: "https://images.unsplash.com/photo-1636466497217-26a8cbeaf0aa?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
          isActive: true,
          instructor: "C√¥ Tr·∫ßn Th·ªã B",
          maxStudents: 15,
     },
     {
          title: "H√≥a h·ªçc l·ªõp 12",
          description: "Kh√≥a h·ªçc h√≥a h·ªçc chuy√™n s√¢u cho h·ªçc sinh l·ªõp 12.",
          price: 2500000,
          duration: "6 th√°ng",
          level: "Chuy√™n s√¢u",
          subjects: ["H√≥a h·ªçc", "H√≥a v√¥ c∆°", "H√≥a h·ªØu c∆°"],
          features: ["Luy·ªán ƒë·ªÅ thi THPT", "Ph∆∞∆°ng ph√°p gi·∫£i nhanh", "Th√≠ nghi·ªám minh h·ªça"],
          image: "https://images.unsplash.com/photo-1532634218-8b3dceb3b0fb?ixlib=rb-4.0.3&auto=format&fit=crop&w=800&q=80",
          isActive: true,
          instructor: "Th·∫ßy L√™ VƒÉn C",
          maxStudents: 25,
     }
];

// Main migration function
async function runMigration() {
     console.log('üöÄ B·∫Øt ƒë·∫ßu migration data sang Firestore...');
     console.log('='.repeat(50));

     try {
          // Check if courses already exist
          const coursesSnapshot = await getDocs(collection(db, 'courses'));
          if (!coursesSnapshot.empty) {
               console.log('‚ö†Ô∏è  Courses ƒë√£ t·ªìn t·∫°i, b·ªè qua migration');
               console.log('‚úÖ Migration ƒë√£ ho√†n th√†nh tr∆∞·ªõc ƒë√≥');
               return;
          }

          console.log('üîÑ ƒêang migrate courses...');

          for (const course of mockCourses) {
               const courseData = {
                    ...course,
                    createdAt: serverTimestamp(),
                    updatedAt: serverTimestamp(),
               };

               const docRef = await addDoc(collection(db, 'courses'), courseData);
               console.log(`‚úÖ ƒê√£ t·∫°o course: ${course.title} (${docRef.id})`);
          }

          console.log('='.repeat(50));
          console.log('üéâ Migration ho√†n th√†nh th√†nh c√¥ng!');
          console.log(`‚úÖ ƒê√£ migrate ${mockCourses.length} courses`);

     } catch (error) {
          console.error('‚ùå Migration th·∫•t b·∫°i:', error.message);
          process.exit(1);
     }
}

// Run migration if called directly
if (require.main === module) {
     runMigration()
          .then(() => {
               console.log('‚úÖ Script ho√†n th√†nh');
               process.exit(0);
          })
          .catch((error) => {
               console.error('‚ùå Script l·ªói:', error);
               process.exit(1);
          });
}

module.exports = { runMigration };

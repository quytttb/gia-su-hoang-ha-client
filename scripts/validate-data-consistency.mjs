import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, writeBatch, Timestamp } from 'firebase/firestore';
import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';

// Firebase configuration
const firebaseConfig = {
     apiKey: "AIzaSyC0ZGhS9oJTZp2jl9fVnQlYq8FQXZvZMJU",
     authDomain: "gia-su-hoang-ha.firebaseapp.com",
     projectId: "gia-su-hoang-ha",
     storageBucket: "gia-su-hoang-ha.appspot.com",
     messagingSenderId: "821551022903",
     appId: "1:821551022903:web:00a86f5c5a35e0c1e3e9f8",
     measurementId: "G-0C25SX7IGJ"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

async function validateAndFixDataConsistency() {
     console.log('üîç VALIDATE V√Ä S·ª¨A CH·ªÆA T√çNH NH·∫§T QU√ÅN D·ªÆ LI·ªÜU');
     console.log('='.repeat(60));

     try {
          // Sign in as admin
          console.log('üîê ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n admin...');
          await signInWithEmailAndPassword(auth, 'admin@giasuhoangha.com', 'admin123');
          console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
          console.log('');

          // Load reference data
          console.log('üìö B∆Ø·ªöC 1: T·∫¢I D·ªÆ LI·ªÜU THAM CHI·∫æU');
          console.log('-'.repeat(40));

          const [classesSnapshot, tutorsSnapshot, schedulesSnapshot] = await Promise.all([
               getDocs(collection(db, 'classes')),
               getDocs(collection(db, 'tutors')),
               getDocs(collection(db, 'schedules'))
          ]);

          // Build reference maps
          const classesMap = new Map();
          const tutorsMap = new Map();

          classesSnapshot.forEach(doc => {
               const data = doc.data();
               classesMap.set(doc.id, data.name || data.title || '');
          });

          tutorsSnapshot.forEach(doc => {
               const data = doc.data();
               tutorsMap.set(doc.id, data.name || '');
          });

          console.log(`‚úÖ ƒê√£ t·∫£i ${classesMap.size} classes v√† ${tutorsMap.size} tutors`);
          console.log('');

          // Validate schedules
          console.log('üîç B∆Ø·ªöC 2: KI·ªÇM TRA T√çNH NH·∫§T QU√ÅN SCHEDULES');
          console.log('-'.repeat(40));

          const batch = writeBatch(db);
          let fixCount = 0;
          let inconsistentData = [];

          schedulesSnapshot.forEach(doc => {
               const data = doc.data();
               const issues = [];
               const updates = {};

               // Check classId v√† className
               const correctClassName = classesMap.get(data.classId);
               if (!correctClassName) {
                    issues.push(`‚ùå classId "${data.classId}" kh√¥ng t·ªìn t·∫°i trong collection classes`);
               } else if (data.className !== correctClassName) {
                    issues.push(`‚ö†Ô∏è className kh√¥ng kh·ªõp: "${data.className}" ‚Üí "${correctClassName}"`);
                    updates.className = correctClassName;
               }

               // Check tutorId v√† tutorName
               const correctTutorName = tutorsMap.get(data.tutorId);
               if (!correctTutorName) {
                    issues.push(`‚ùå tutorId "${data.tutorId}" kh√¥ng t·ªìn t·∫°i trong collection tutors`);
               } else if (data.tutorName !== correctTutorName) {
                    issues.push(`‚ö†Ô∏è tutorName kh√¥ng kh·ªõp: "${data.tutorName}" ‚Üí "${correctTutorName}"`);
                    updates.tutorName = correctTutorName;
               }

               // Check required fields
               if (!data.classId) issues.push('‚ùå Thi·∫øu classId');
               if (!data.className) issues.push('‚ùå Thi·∫øu className');
               if (!data.tutorId) issues.push('‚ùå Thi·∫øu tutorId');
               if (!data.tutorName) issues.push('‚ùå Thi·∫øu tutorName');
               if (!data.startDate) issues.push('‚ùå Thi·∫øu startDate');
               if (!data.startTime) issues.push('‚ùå Thi·∫øu startTime');
               if (!data.endTime) issues.push('‚ùå Thi·∫øu endTime');
               if (data.maxStudents !== 12) {
                    issues.push(`‚ö†Ô∏è maxStudents kh√¥ng chu·∫©n: ${data.maxStudents} ‚Üí 12`);
                    updates.maxStudents = 12;
               }

               // Check legacy fields
               if (data.tutor !== undefined) {
                    issues.push('‚ö†Ô∏è T·ªìn t·∫°i field "tutor" c≈©');
               }
               if (data.courseId !== undefined) {
                    issues.push('‚ö†Ô∏è T·ªìn t·∫°i field "courseId" c≈©');
               }
               if (data.date !== undefined) {
                    issues.push('‚ö†Ô∏è T·ªìn t·∫°i field "date" c≈©');
               }
               if (data.room !== undefined) {
                    issues.push('‚ö†Ô∏è T·ªìn t·∫°i field "room" c≈©');
               }

               if (issues.length > 0) {
                    inconsistentData.push({
                         id: doc.id,
                         issues: issues,
                         currentData: {
                              classId: data.classId,
                              className: data.className,
                              tutorId: data.tutorId,
                              tutorName: data.tutorName,
                              maxStudents: data.maxStudents
                         }
                    });

                    console.log(`üìÖ Schedule ${doc.id}:`);
                    issues.forEach(issue => console.log(`   ${issue}`));
                    console.log('');

                    // Apply fixes
                    if (Object.keys(updates).length > 0) {
                         updates.updatedAt = Timestamp.now();
                         batch.update(doc.ref, updates);
                         fixCount++;
                    }
               }
          });

          // Apply fixes
          if (fixCount > 0) {
               console.log('üíæ B∆Ø·ªöC 3: √ÅP D·ª§NG S·ª¨A CH·ªÆA');
               console.log('-'.repeat(40));

               await batch.commit();
               console.log(`‚úÖ ƒê√£ s·ª≠a ch·ªØa ${fixCount} schedules`);
               console.log('');
          }

          // Summary
          console.log('üìä K·∫æT QU·∫¢ KI·ªÇM TRA:');
          console.log(`   üìÖ T·ªïng s·ªë schedules: ${schedulesSnapshot.size}`);
          console.log(`   ‚ùå Schedules c√≥ v·∫•n ƒë·ªÅ: ${inconsistentData.length}`);
          console.log(`   üîß ƒê√£ s·ª≠a ch·ªØa: ${fixCount}`);
          console.log('');

          if (inconsistentData.length === 0) {
               console.log('üéâ T·∫§T C·∫¢ D·ªÆ LI·ªÜU NH·∫§T QU√ÅN!');
               console.log('   ‚Ä¢ T·∫•t c·∫£ className kh·ªõp v·ªõi classes');
               console.log('   ‚Ä¢ T·∫•t c·∫£ tutorName kh·ªõp v·ªõi tutors');
               console.log('   ‚Ä¢ Kh√¥ng c√≥ field legacy n√†o');
               console.log('   ‚Ä¢ C·∫•u tr√∫c d·ªØ li·ªáu chu·∫©n h√≥a ho√†n to√†n');
          } else {
               console.log('‚ö†Ô∏è V·∫™N C√íN V·∫§N ƒê·ªÄ C·∫¶N X·ª¨ L√ù TH·ª¶ C√îNG:');
               inconsistentData.forEach(item => {
                    if (item.issues.some(issue => issue.includes('‚ùå'))) {
                         console.log(`   ‚Ä¢ Schedule ${item.id}: ${item.issues.filter(i => i.includes('‚ùå')).join(', ')}`);
                    }
               });
          }

          console.log('');
          console.log('üéØ KHUY·∫æN NGH·ªä:');
          console.log('   1. Ch·∫°y script n√†y ƒë·ªãnh k·ª≥ ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh nh·∫•t qu√°n');
          console.log('   2. Khi c·∫≠p nh·∫≠t t√™n class/tutor, ch·∫°y script n√†y ngay sau');
          console.log('   3. S·ª≠ d·ª•ng DataSyncUtils trong code khi c·∫≠p nh·∫≠t d·ªØ li·ªáu');

     } catch (error) {
          console.error('‚ùå L·ªói:', error.message);
     }
}

// Run validation
validateAndFixDataConsistency().then(() => {
     console.log('‚úÖ Ho√†n th√†nh validation v√† s·ª≠a ch·ªØa');
     process.exit(0);
}).catch(error => {
     console.error('‚ùå L·ªói:', error);
     process.exit(1);
});

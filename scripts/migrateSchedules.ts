import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, doc, updateDoc, deleteField } from 'firebase/firestore';

// Firebase config - thay th·∫ø b·∫±ng config th·ª±c t·∫ø c·ªßa b·∫°n
const firebaseConfig = {
     // Th√™m config Firebase c·ªßa b·∫°n ·ªü ƒë√¢y
};

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

async function migrateSchedulesToStudentPhones() {
     console.log('B·∫Øt ƒë·∫ßu migration schedules...');

     try {
          const schedulesRef = collection(db, 'schedules');
          const snapshot = await getDocs(schedulesRef);

          console.log(`T√¨m th·∫•y ${snapshot.docs.length} l·ªãch h·ªçc c·∫ßn migration`);

          for (const docSnapshot of snapshot.docs) {
               const data = docSnapshot.data();
               const docRef = doc(db, 'schedules', docSnapshot.id);

               // Ki·ªÉm tra n·∫øu c√≥ studentIds
               if (data.studentIds && Array.isArray(data.studentIds)) {
                    console.log(`Migrating schedule ${docSnapshot.id}...`);

                    // Chuy·ªÉn ƒë·ªïi studentIds th√†nh studentPhones
                    // Gi·∫£ s·ª≠: student-1 -> phone1, student-2 -> phone2, etc.
                    // B·∫°n c√≥ th·ªÉ thay ƒë·ªïi logic mapping n√†y theo d·ªØ li·ªáu th·ª±c t·∫ø
                    const studentPhones = data.studentIds.map((studentId: string) => {
                         // Logic chuy·ªÉn ƒë·ªïi t·ª´ studentId sang phone
                         // V√≠ d·ª•: n·∫øu c√≥ b·∫£ng mapping ho·∫∑c pattern c·ªë ƒë·ªãnh
                         return studentId.replace('student-', '09876543') + Math.floor(Math.random() * 10);
                    });

                    // C·∫≠p nh·∫≠t document
                    await updateDoc(docRef, {
                         studentPhones: studentPhones,
                         maxStudents: data.maxStudents || 10, // ƒê·∫∑t m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
                         studentIds: deleteField() // X√≥a tr∆∞·ªùng c≈©
                    });

                    console.log(`‚úÖ Migrated schedule ${docSnapshot.id}: ${data.studentIds.length} students`);
               } else {
                    // N·∫øu ch∆∞a c√≥ studentIds, ch·ªâ th√™m studentPhones r·ªóng v√† maxStudents
                    await updateDoc(docRef, {
                         studentPhones: [],
                         maxStudents: data.maxStudents || 10
                    });

                    console.log(`‚úÖ Updated schedule ${docSnapshot.id}: added empty studentPhones`);
               }
          }

          console.log('üéâ Migration ho√†n th√†nh!');

     } catch (error) {
          console.error('‚ùå L·ªói khi migration:', error);
     }
}

// Ch·∫°y migration
migrateSchedulesToStudentPhones(); 
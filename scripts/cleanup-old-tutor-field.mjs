import { initializeApp } from 'firebase/app';
import { getFirestore, collection, getDocs, writeBatch, deleteField } from 'firebase/firestore';
import { getAuth, signInWithEmailAndPassword } from 'firebase/auth';

// Firebase configuration
const firebaseConfig = {
     apiKey: "AIzaSyC0ZGhS9oJTZp2jl9fVnQlYq8FQXZvZMJU",
     authDomain: "gia-su-hoang-ha.firebaseapp.com",
     projectId: "gia-su-hoang-ha",
     storageBucket: "gia-su-hoang-ha.appspot.com",
     messagingSenderId: "821551022903",
     appId: "1:821551022903:web:00a86f5c5a35e0c1e3e9f8",
     measurementId: "G-0C25SX7IGJ"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);

async function cleanupOldTutorField() {
     console.log('üßπ SCRIPT X√ìA FIELD "TUTOR" C≈®');
     console.log('='.repeat(50));

     try {
          // Sign in as admin
          console.log('üîê ƒêƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n admin...');
          await signInWithEmailAndPassword(auth, 'admin@giasuhoangha.com', 'admin123');
          console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng!');
          console.log('');

          // Get all schedules
          console.log('üìÖ T·∫£i danh s√°ch schedules...');
          const schedulesSnapshot = await getDocs(collection(db, 'schedules'));
          console.log(`üìä T√¨m th·∫•y ${schedulesSnapshot.size} schedules`);
          console.log('');

          // Create batch to delete old tutor field
          const batch = writeBatch(db);
          let deleteCount = 0;

          schedulesSnapshot.forEach(doc => {
               const data = doc.data();

               if (data.tutor !== undefined) {
                    console.log(`üóëÔ∏è  X√≥a field "tutor" t·ª´ schedule ${doc.id}`);
                    batch.update(doc.ref, {
                         tutor: deleteField()
                    });
                    deleteCount++;
               }
          });

          if (deleteCount > 0) {
               console.log('');
               console.log('üíæ ƒêang l∆∞u c·∫≠p nh·∫≠t...');
               await batch.commit();
               console.log(`‚úÖ ƒê√£ x√≥a field "tutor" t·ª´ ${deleteCount} schedules`);
          } else {
               console.log('‚úÖ Kh√¥ng c√≥ field "tutor" n√†o c·∫ßn x√≥a');
          }

          console.log('');
          console.log('üéØ HO√ÄN TH√ÄNH:');
          console.log('   ‚Ä¢ T·∫•t c·∫£ field "tutor" c≈© ƒë√£ ƒë∆∞·ª£c x√≥a');
          console.log('   ‚Ä¢ Schedules hi·ªán ch·ªâ s·ª≠ d·ª•ng tutorId + tutorName');
          console.log('   ‚Ä¢ D·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c chu·∫©n h√≥a ho√†n to√†n');

     } catch (error) {
          console.error('‚ùå L·ªói:', error.message);
     }
}

// Run cleanup
cleanupOldTutorField().then(() => {
     console.log('‚úÖ Ho√†n th√†nh cleanup field tutor c≈©');
     process.exit(0);
}).catch(error => {
     console.error('‚ùå L·ªói:', error);
     process.exit(1);
});

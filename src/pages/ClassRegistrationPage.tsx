import { useEffect, useState, FormEvent } from 'react';
import { useParams, useNavigate, Link } from 'react-router-dom';
import Layout from '../components/layout/Layout';
import { Class } from '../types';
import classesService from '../services/firestore/classesService';
import registrationsService from '../services/firestore/registrationsService';
import { convertFirestoreClass } from '../utils/classHelpers';
import { formatCurrency, hasValidDiscount } from '../utils/helpers';
import Chatbot from '../components/shared/Chatbot';
import DevFormHelper from '../components/dev/DevFormHelper';
import {
  validateAndSanitizePhone,
  validateAndSanitizeName,
  defaultRateLimiter,
  getClientIdentifier,
} from '../utils/security';
import { sendRegistrationEmail, sendAutoReplyEmail, initEmailJS } from '../services/emailService';
import confetti from 'canvas-confetti';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '../components/ui/dialog';
import { Button } from '../components/ui/button';

const CourseRegistrationPage = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [course, setCourse] = useState<Class | undefined>(undefined);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    parentName: '',
    parentPhone: '',
    parentAddress: '',
    name: '',
    school: '',
    academicDescription: '',
  });
  const [errors, setErrors] = useState<Record<string, string>>({});
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [showSuccessDialog, setShowSuccessDialog] = useState(false);

  useEffect(() => {
    const fetchCourse = async () => {
      if (!id) return;
      const result = await classesService.getById(id);
      setCourse(result.data ? convertFirestoreClass(result.data) : undefined);
      setLoading(false);
    };
    fetchCourse();

    // Initialize EmailJS
    initEmailJS();
  }, [id]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  };

  // Dev helper functions
  const handleDevFillForm = (data: any) => {
    setFormData(data);
    setErrors({}); // Clear any existing errors
  };

  const handleDevClearForm = () => {
    setFormData({
      parentName: '',
      parentPhone: '',
      parentAddress: '',
      name: '',
      school: '',
      academicDescription: '',
    });
    setErrors({});
  };

  // Expose dev functions globally for DevAdminHelper
  useEffect(() => {
    // Only expose in development mode
    if (process.env.NODE_ENV === 'development') {
      (window as any).__devFormFill = handleDevFillForm;
      (window as any).__devFormClear = handleDevClearForm;
    }

    // Cleanup on unmount
    return () => {
      if (process.env.NODE_ENV === 'development') {
        delete (window as any).__devFormFill;
        delete (window as any).__devFormClear;
      }
    };
  }, []);

  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    // Validate parent info
    if (!formData.parentName.trim()) {
      newErrors.parentName = 'Vui l√≤ng nh·∫≠p h·ªç t√™n ph·ª• huynh';
    }
    if (!formData.parentPhone.trim()) {
      newErrors.parentPhone = 'Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ph·ª• huynh';
    } else {
      const parentPhoneValidation = validateAndSanitizePhone(formData.parentPhone);
      if (!parentPhoneValidation.isValid) {
        newErrors.parentPhone = parentPhoneValidation.error || 'S·ªë ƒëi·ªán tho·∫°i ph·ª• huynh kh√¥ng h·ª£p l·ªá';
      }
    }
    if (!formData.parentAddress.trim()) {
      newErrors.parentAddress = 'Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ ph·ª• huynh';
    }

    // Validate and sanitize name
    const nameValidation = validateAndSanitizeName(formData.name);
    if (!nameValidation.isValid) {
      newErrors.name = nameValidation.error || 'H·ªç t√™n kh√¥ng h·ª£p l·ªá';
    }

    // Validate school
    if (!formData.school.trim()) {
      newErrors.school = 'Vui l√≤ng nh·∫≠p tr∆∞·ªùng h·ªçc';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();

    if (!validateForm() || !id || !course) {
      return;
    }

    // Hi·ªán dialog x√°c nh·∫≠n thay v√¨ submit ngay
    setShowConfirmDialog(true);
  };

  const handleConfirmSubmit = async () => {
    if (!id || !course) {
      alert('Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªõp h·ªçc. Vui l√≤ng t·∫£i l·∫°i trang ho·∫∑c ch·ªçn l·∫°i l·ªõp!');
      return;
    }

    // Fallback an to√†n cho t√™n v√† l·ªãch l·ªõp h·ªçc
    const courseName = course.name || 'Ch∆∞a x√°c ƒë·ªãnh';
    const courseSchedule = course.schedule || 'Linh ho·∫°t';

    // Check rate limiting
    const clientId = getClientIdentifier();
    if (!defaultRateLimiter.isAllowed(clientId)) {
      const remaining = defaultRateLimiter.getRemainingRequests(clientId);
      alert(`B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu y√™u c·∫ßu. Vui l√≤ng th·ª≠ l·∫°i sau. C√≤n l·∫°i: ${remaining} y√™u c·∫ßu.`);
      return;
    }

    // Get sanitized data
    const nameValidation = validateAndSanitizeName(formData.name);
    const parentPhoneValidation = validateAndSanitizePhone(formData.parentPhone);

    // Double-check all validations passed
    if (!nameValidation.isValid || !parentPhoneValidation.isValid) {
      return;
    }

    try {
      setSubmitting(true);
      setShowConfirmDialog(false);

      const registrationData = {
        // Registration type
        type: 'class' as const,
        classId: id,
        className: courseName,
        classSchedule: courseSchedule,
        studentName: nameValidation.sanitized,
        studentPhone: formData.parentPhone, // Using parent phone for now
        studentSchool: formData.school, // Tr∆∞·ªùng h·ªçc c·ªßa h·ªçc vi√™n
        parentName: formData.parentName,
        parentPhone: parentPhoneValidation.sanitized,
        parentAddress: formData.parentAddress, // ƒê·ªãa ch·ªâ ph·ª• huynh
        preferredSchedule: courseSchedule, // S·ª≠ d·ª•ng l·ªãch v·ªõi fallback
        notes: formData.academicDescription || undefined, // M√¥ t·∫£ l·ª±c h·ªçc
        status: 'pending' as const,
      };

      // Debug: log registration data
      console.log('üîç Registration data:', registrationData);

      const registrationResult = await registrationsService.createRegistration(registrationData);

      if (registrationResult.error) {
        alert(registrationResult.error);
        return;
      }

      // Send registration email
      const emailResult = await sendRegistrationEmail(
        nameValidation.sanitized,
        '',
        parentPhoneValidation.sanitized,
        courseName,
        id,
        courseSchedule
      );

      if (emailResult.success) {
        // Send auto-reply to student
        await sendAutoReplyEmail(nameValidation.sanitized, '', true);
      }

      // Show success regardless of email status
      // Hi·ªáu ·ª©ng ph√°o hoa
      confetti({
        particleCount: 100,
        spread: 70,
        origin: { y: 0.6 }
      });

      // Hi·ªán dialog th√†nh c√¥ng
      setShowSuccessDialog(true);

    } catch (error) {
      console.error('Error submitting registration:', error);
      alert('ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp qua WhatsApp.');
    } finally {
      setSubmitting(false);
    }
  };

  const triggerMoreConfetti = () => {
    confetti({
      particleCount: 150,
      spread: 100,
      origin: { y: 0.5 }
    });
  };

  if (loading) {
    return (
      <Layout>
        <div className="flex justify-center items-center min-h-[400px]">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary"></div>
        </div>
      </Layout>
    );
  }

  if (!course) {
    return (
      <Layout>
        <div className="container-custom py-20 text-center">
          <h2 className="text-2xl font-bold text-gray-800 dark:text-gray-200 mb-4">Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc</h2>
          <p className="text-gray-600 dark:text-gray-400 mb-8">
            Kh√≥a h·ªçc b·∫°n ƒëang t√¨m ki·∫øm kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a.
          </p>
          <Link to="/classes" className="btn-primary">
            Quay l·∫°i danh s√°ch l·ªõp h·ªçc
          </Link>
        </div>
      </Layout>
    );
  }

  const hasValidDiscountValue = hasValidDiscount(course.discount, course.discountEndDate);

  return (
    <Layout>
      <div className="container-custom py-16 pb-32">
        <div className="max-w-4xl mx-auto">
          <h1 className="text-3xl font-bold text-gray-800 dark:text-gray-200 mb-6 text-center">ƒêƒÉng k√Ω l·ªõp h·ªçc</h1>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8 md:h-[500px]">
            <div className="md:col-span-2 flex flex-col h-full">
              <div className="bg-white dark:bg-gray-800 p-8 rounded-lg shadow-md flex flex-col h-full">
                <form onSubmit={handleSubmit}>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    {/* C·ªôt ph·ª• huynh */}
                    <div>
                      <h2 className="text-lg font-semibold text-black dark:text-white mb-4">Th√¥ng tin Ph·ª• Huynh</h2>
                      <div className="mb-5">
                        <label htmlFor="parentName" className="block text-black dark:text-white text-sm font-medium mb-2">H·ªç v√† t√™n ph·ª• huynh <span className="text-red-500">*</span></label>
                        <input type="text" id="parentName" name="parentName" value={formData.parentName} onChange={handleChange} className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary ${errors.parentName ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 text-sm`} placeholder="Nh·∫≠p h·ªç v√† t√™n ph·ª• huynh" />
                        {errors.parentName && <p className="text-red-500 text-xs mt-2">{errors.parentName}</p>}
                      </div>
                      <div className="mb-5">
                        <label htmlFor="parentPhone" className="block text-black dark:text-white text-sm font-medium mb-2">S·ªë ƒëi·ªán tho·∫°i ph·ª• huynh <span className="text-red-500">*</span></label>
                        <input type="tel" id="parentPhone" name="parentPhone" value={formData.parentPhone} onChange={handleChange} className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary ${errors.parentPhone ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 text-sm`} placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ph·ª• huynh" />
                        {errors.parentPhone && <p className="text-red-500 text-xs mt-2">{errors.parentPhone}</p>}
                      </div>
                      <div className="mb-5">
                        <label htmlFor="parentAddress" className="block text-black dark:text-white text-sm font-medium mb-2">ƒê·ªãa ch·ªâ ph·ª• huynh <span className="text-red-500">*</span></label>
                        <input type="text" id="parentAddress" name="parentAddress" value={formData.parentAddress} onChange={handleChange} className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary ${errors.parentAddress ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 text-sm`} placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ph·ª• huynh" />
                        {errors.parentAddress && <p className="text-red-500 text-xs mt-2">{errors.parentAddress}</p>}
                      </div>
                    </div>
                    {/* C·ªôt h·ªçc vi√™n */}
                    <div>
                      <h2 className="text-lg font-semibold text-black dark:text-white mb-4">Th√¥ng tin H·ªçc Vi√™n</h2>
                      <div className="mb-5">
                        <label htmlFor="name" className="block text-black dark:text-white text-sm font-medium mb-2">H·ªç v√† t√™n <span className="text-red-500">*</span></label>
                        <input type="text" id="name" name="name" value={formData.name} onChange={handleChange} className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary ${errors.name ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 text-sm`} placeholder="Nh·∫≠p h·ªç v√† t√™n" />
                        {errors.name && <p className="text-red-500 text-xs mt-2">{errors.name}</p>}
                      </div>
                      <div className="mb-5">
                        <label htmlFor="school" className="block text-black dark:text-white text-sm font-medium mb-2">Tr∆∞·ªùng h·ªçc <span className="text-red-500">*</span></label>
                        <input type="text" id="school" name="school" value={formData.school} onChange={handleChange} className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary ${errors.school ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'} bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 text-sm`} placeholder="Nh·∫≠p t√™n tr∆∞·ªùng h·ªçc" />
                        {errors.school && <p className="text-red-500 text-xs mt-2">{errors.school}</p>}
                      </div>
                      <div className="mb-5">
                        <label htmlFor="academicDescription" className="block text-black dark:text-white text-sm font-medium mb-2">M√¥ t·∫£ l·ª±c h·ªçc <span className="text-gray-500 text-xs">(kh√¥ng b·∫Øt bu·ªôc)</span></label>
                        <textarea id="academicDescription" name="academicDescription" value={formData.academicDescription} onChange={handleChange} rows={3} className={`w-full px-4 py-3 border rounded-lg focus:outline-none focus:ring-2 focus:ring-primary border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 text-sm resize-none`} placeholder="M√¥ t·∫£ ng·∫Øn g·ªçn v·ªÅ l·ª±c h·ªçc hi·ªán t·∫°i c·ªßa h·ªçc vi√™n (v√≠ d·ª•: h·ªçc kh√°, c·∫ßn c·∫£i thi·ªán to√°n, gi·ªèi vƒÉn...)" />
                      </div>
                    </div>
                  </div>
                  <div className="mt-8">
                    <button type="submit" disabled={submitting} className="btn-primary w-full flex items-center justify-center mb-4 text-base py-3">
                      {submitting ? (
                        <>
                          <svg className="animate-spin -ml-1 mr-2 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          ƒêang x·ª≠ l√Ω...
                        </>
                      ) : (
                        'ƒêƒÉng k√Ω ngay'
                      )}
                    </button>
                    {/* Zalo Alternative */}
                    <div className="text-center">
                      <p className="text-gray-500 dark:text-gray-400 text-xs mb-2">Ho·∫∑c t∆∞ v·∫•n qua:</p>
                      <button type="button" onClick={() => window.open('https://zalo.me/0385510892', '_blank')} className="w-full inline-flex items-center justify-center space-x-2 px-3 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors duration-200 text-sm">
                        <img src="/images/zalo-logo.svg" alt="Zalo" className="w-5 h-5" />
                        <span>T∆∞ v·∫•n qua Zalo</span>
                      </button>
                    </div>
                  </div>
                </form>
              </div>
            </div>

            <div className="flex flex-col h-full">
              <div className="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-md flex flex-col h-full">
                <h3 className="text-lg font-semibold text-black dark:text-white mb-4">Th√¥ng tin l·ªõp h·ªçc</h3>
                <div className="mb-4 flex items-center justify-center bg-white dark:bg-gray-800 rounded-lg overflow-hidden">
                  <img
                    src={course.imageUrl}
                    alt={course.name}
                    style={{ width: '100%', maxWidth: '1180px', height: 'auto', aspectRatio: '1180/800', objectFit: 'contain' }}
                    className="bg-white dark:bg-gray-800"
                  />
                </div>
                <h4 className="font-bold text-black dark:text-white mb-2">{course.name}</h4>
                <p className="text-gray-600 dark:text-gray-400 text-sm mb-4">
                  {course.description.substring(0, 100)}...
                </p>
                <div className="mt-2 mb-4">
                  <h5 className="font-semibold text-black dark:text-white mb-2">Th√¥ng tin l·ªõp h·ªçc</h5>
                  <div className="text-sm text-gray-700 dark:text-gray-200 space-y-1">
                    <div className="border-b border-gray-100 dark:border-gray-700 pb-1">
                      <span className="font-medium">L·ªãch h·ªçc:</span> th·ª© 2 ƒë·∫øn 4
                    </div>
                    <div className="border-b border-gray-100 dark:border-gray-700 pb-1">
                      <span className="font-medium">Gi·ªù h·ªçc:</span> 19:30 ƒë·∫øn 21:30
                    </div>
                    <div className="pb-1">
                      <span className="font-medium">S·ªë l∆∞·ª£ng:</span> 12
                    </div>
                  </div>
                </div>
                <div className="border-t border-gray-200 pt-4 mb-4">
                  <div className="flex justify-between items-center mb-2">
                    <span className="text-black dark:text-white">H·ªçc ph√≠:</span>
                    <span className="font-semibold text-black dark:text-white">{formatCurrency(course.price)}</span>
                  </div>
                  {hasValidDiscountValue && (
                    <div className="flex justify-between items-center mb-2">
                      <span className="text-black dark:text-white">Gi·∫£m gi√°:</span>
                      <span className="text-green-600">-{course.discount}%</span>
                    </div>
                  )}
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400 mt-4">
                  <p>* H·ªçc ph√≠ s·∫Ω ƒë∆∞·ª£c thanh to√°n t·∫°i trung t√¢m sau khi ƒëƒÉng k√Ω ƒë∆∞·ª£c x√°c nh·∫≠n.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <Chatbot />
      {/* Dialog x√°c nh·∫≠n ƒëƒÉng k√Ω */}
      <Dialog open={showConfirmDialog} onOpenChange={setShowConfirmDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>X√°c nh·∫≠n ƒëƒÉng k√Ω l·ªõp h·ªçc</DialogTitle>
            <DialogDescription>
              B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng k√Ω l·ªõp h·ªçc "{course?.name}" v·ªõi th√¥ng tin ƒë√£ nh·∫≠p kh√¥ng?
            </DialogDescription>
          </DialogHeader>
          <DialogFooter>
            <Button variant="outline" onClick={() => setShowConfirmDialog(false)}>
              H·ªßy
            </Button>
            <Button onClick={handleConfirmSubmit} disabled={submitting}>
              {submitting ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n ƒëƒÉng k√Ω'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Dialog th√†nh c√¥ng */}
      <Dialog open={showSuccessDialog} onOpenChange={setShowSuccessDialog}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle className="text-center text-green-600">üéâ ƒêƒÉng k√Ω th√†nh c√¥ng!</DialogTitle>
            <DialogDescription className="text-center">
              C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω l·ªõp h·ªçc v·ªõi Gia S∆∞ Ho√†ng H√†.<br />
              Nh√¢n vi√™n t∆∞ v·∫•n s·∫Ω li√™n h·ªá v·ªõi b·∫°n trong th·ªùi gian s·ªõm nh·∫•t ƒë·ªÉ x√°c nh·∫≠n th√¥ng tin.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="flex justify-center space-x-2">
            <Button variant="outline" onClick={triggerMoreConfetti}>
              üéä Ph√°o hoa
            </Button>
            <Button onClick={() => {
              setShowSuccessDialog(false);
              navigate('/classes');
            }}>
              Quay l·∫°i trang l·ªõp h·ªçc
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Dev Form Helper - Only shows in development */}
      <DevFormHelper
        onFillForm={handleDevFillForm}
        onClearForm={handleDevClearForm}
      />
    </Layout>
  );
};

export default CourseRegistrationPage;

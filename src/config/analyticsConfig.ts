/**
 * C·∫•u h√¨nh v√¥ hi·ªáu h√≥a Google Analytics v√† Firebase Installations
 * khi g·∫∑p l·ªói 403 PERMISSION_DENIED
 */

import { setAnalyticsCollectionEnabled, Analytics } from 'firebase/analytics';
import { analytics } from './firebase';

/**
 * V√¥ hi·ªáu h√≥a vi·ªác thu th·∫≠p d·ªØ li·ªáu Analytics
 * C·∫ßn g·ªçi h√†m n√†y sau khi Firebase ƒë∆∞·ª£c kh·ªüi t·∫°o
 */
export const disableAnalyticsCollection = () => {
     try {
          // S·ª≠ d·ª•ng type assertion ƒë·ªÉ tr√°nh l·ªói linter
          const analyticsInstance = analytics as Analytics | null;
          if (analyticsInstance) {
               setAnalyticsCollectionEnabled(analyticsInstance, false);
               console.log('Google Analytics data collection disabled');
          }
     } catch (error) {
          console.warn('Failed to disable Analytics collection:', error);
     }
};

/**
 * V√¥ hi·ªáu h√≥a t·ª± ƒë·ªông Analytics tr√™n c√°c trang 
 * trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn ƒë·ªÉ tr√°nh l·ªói 403
 */
export const setupAnalyticsForDevelopment = () => {
     if (import.meta.env.DEV) {
          disableAnalyticsCollection();
          console.log('Analytics disabled in development environment');
     }
};

/**
 * Hook v√†o window.fetch ƒë·ªÉ ch·∫∑n c√°c y√™u c·∫ßu Firebase Installations
 * Gi·∫£i ph√°p tri·ªát ƒë·ªÉ khi c√°c bi·ªán ph√°p kh√°c kh√¥ng ho·∫°t ƒë·ªông
 */
export const blockFirebaseInstallationsRequests = () => {
     if (typeof window !== 'undefined') {
          const originalFetch = window.fetch;

          window.fetch = function (input: RequestInfo | URL, init?: RequestInit) {
               const url = input.toString();

               // Ch·∫∑n c√°c y√™u c·∫ßu ƒë·∫øn Firebase Installations v√† Analytics Config
               if (url.includes('firebaseinstallations.googleapis.com') ||
                    url.includes('firebase.googleapis.com/v1alpha/projects')) {
                    console.log('‚õî Blocked Firebase request to:', url);

                    // Tr·∫£ v·ªÅ promise ƒë√£ gi·∫£i quy·∫øt v·ªõi ph·∫£n h·ªìi gi·∫£
                    return Promise.resolve(new Response(JSON.stringify({
                         blocked: true,
                         message: 'Request blocked by application'
                    }), {
                         status: 200,
                         headers: { 'Content-Type': 'application/json' }
                    }));
               }

               // Cho ph√©p t·∫•t c·∫£ c√°c y√™u c·∫ßu kh√°c
               return originalFetch.apply(this, [input, init]);
          };

          console.log('üì∂ Firebase network request blocker enabled');
     }
};

// T·ª± ƒë·ªông thi·∫øt l·∫≠p trong m√¥i tr∆∞·ªùng ph√°t tri·ªÉn
if (import.meta.env.DEV) {
     setupAnalyticsForDevelopment();
     blockFirebaseInstallationsRequests();
} 